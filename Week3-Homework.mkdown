## In Javascript, functions are first class objects. What does it mean to be a first class object?
A function can be used anywhere an object can be used; in particular, you can pass functions as method arguments.  (We did this in last week's homework by passing the `print` function into the `iterateAndOperate` method).  This is in contrast to a language like Java where functions are *not* first class objects, and the programmer must use interfaces and anonymous classes to get around this problem.  For instance, in Java, to delay the invocation of a function, you might do the following:

<div>
[sourcecode language="java"]
SwingUtilities.invokeLater(new Runnable() {
    @Override
    public void run() {
        System.out.println("I was run!");
    }
})
[/sourcecode]
</div>

whereas in Javascript, you could do something like

<div>
[sourcecode language="javascript"]
invokeLater(function() { print("I was run") });
[/sourcecode]
</div>

assuming there was an invokeLater function.




## Functions and variables share the same namespace. What does this mean and what important implication does this have?

This means that you must take care in not defining variables in the global namespace that have the same name as a function.  For instance,

<div>
[sourcecode language="javascript"]

print = true;




[/sourcecode]
</div>


## Douglas Crockford equates Javascript functions with Lambdas, and also mentions that they are a secure construct. Can you do some research and reflect on what he means by 'secure construct'?

## Can you explain the concept of a closure.

## What is the difference between a function and a method?

## In Javascript there is no implicit type checking of arguments passed to functions. This could lead to bugs if programmers are not careful about what they pass to functions. If you create a function, how would you protect it from well meaning but careless programmers?

## Javascript functions have implicit access to something called this. this points to different things depending on how the function was created. Can you explain why we need this, and what it represents in different type of functions.

## Why doesn't Javascript have a cast operator?

## What is reflection and why is it easy in Javascript (you may need to do research to answer this question)?


## 4.1
>The solution for the cat problem talks about a 'set' of names. A set is a collection of values in which no value may occur more than once. If names are strings, can you think of a way to use an object to represent a set of names?

>Show how a name can be added to this set, how one can be removed, and how you can check whether a name occurs in it.

<div>
[sourcecode language="javascript"]
var cat_set = {};
// Add a cat
cat_set["Tigger"] = true;
// remove a cat
delete cat_set["Tigger"];

// Check if cat exists
cat_set["Frog"] != undefined

// Wrap it all up nicely: in an object with functions:
var cat_set = {};
cat_set.add_cat = function(cat) {
    this[cat] = true;
}
cat_set.remove_cat = function(cat) {
    delete this[cat];
}
cat_set.cat_exists = function(cat) {
    return this[cat] != undefined;
}

cat_set.add_cat("Frisky");
// prints "true"
show(cat_set.cat_exists("Frisky"))
cat_set.remove_cat("Frisky");
// "false"
show(cat_set.cat_exists("Frisky"))
[/sourcecode]
</div>


## 4.2
> Write a function range that takes one argument, a positive number, and returns an array containing all numbers from 0 up to and including the given number.

>An empty array can be created by simply typing []. Also remember that adding properties to an object, and thus also to an array, can be done by assigning them a value with the = operator. The length property is automatically updated when elements are added.

<div>
[sourcecode language="javascript"]
// Assumes n >= 0
function range(n) {
    var array = [];
    for (var i = 0; i <= n; i++) {
        array[i] = i;
    }
    return array;
}
[/sourcecode]
</div>

## 4.3
> `split` and `join` are not precisely each other's inverse. `string.split(x).join(x)` always produces the original value, but `array.join(x).split(x)` does not. Can you give an example of an array where `.join(" ").split(" ")` produces a different value?

<div>
[sourcecode language="javascript"]
[" ", " ", " "].join(" ").split(" ");
// equals ["", "", "", "", "", ""]
[/sourcecode]
</div>

## 4.4
>Write a function called startsWith that takes two arguments, both strings. It returns true when the first argument starts with the characters in the second argument, and false otherwise.

<div>
[sourcecode language="javascript"]
function startsWith(string, pattern) {
    return string.slice(0,pattern.length) === pattern;
}
[/sourcecode]
</div>


## 4.5
> Can you write a function `catNames` that takes a paragraph as an argument and returns an array of names?

> Strings have an `indexOf` method that can be used to find the (first) position of a character or sub-string within that string. Also, when `slice` is given only one argument, it will return the part of the string from the given position all the way to the end.

> It can be helpful to use the console to 'explore' functions. For example, type `"foo: bar".indexOf(":")` and see what you get.

<div>
[sourcecode language="javascript"]
// The sentence is in the form "Blah blah: cat1, cat2, ..., catN."
function catNames(paragraph) {
    var colonIndex = paragraph.indexOf(":");
    // Skip the colon and the following space
    var catListString = paragraph.slice(colonIndex + 2);
    return catString.split(", ");
}
[/sourcecode]
</div>

